Index: app/src/main/java/com/example/myapplication/DataAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication;\r\n\r\nimport android.content.Context;\r\nimport android.database.Cursor;\r\nimport android.database.SQLException;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.ResultSet;\r\nimport java.sql.Statement;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class DataAdapter {\r\n    protected static final String TAG = \"DataAdapter\";\r\n\r\n    // TODO : TABLE 이름을 명시해야함\r\n    protected static final String TABLE_NAME = \"student\";\r\n\r\n    private final Context mContext;\r\n    private SQLiteDatabase mDb;\r\n    private DataBaseHelper mDbHelper;\r\n\r\n    public DataAdapter(Context context)\r\n    {\r\n        this.mContext = context;\r\n        mDbHelper = new DataBaseHelper(mContext);\r\n    }\r\n\r\n    public DataAdapter createDatabase() throws SQLException\r\n    {\r\n        try\r\n        {\r\n            mDbHelper.createDataBase();\r\n        }\r\n        catch (IOException mIOException)\r\n        {\r\n            Log.e(TAG, mIOException.toString() + \"  UnableToCreateDatabase\");\r\n            throw new Error(\"UnableToCreateDatabase\");\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public DataAdapter open() throws SQLException\r\n    {\r\n        try\r\n        {\r\n            mDbHelper.openDataBase();\r\n            mDbHelper.close();\r\n            mDb = mDbHelper.getReadableDatabase();\r\n        }\r\n        catch (SQLException mSQLException)\r\n        {\r\n            Log.e(TAG, \"open >>\"+ mSQLException.toString());\r\n            throw mSQLException;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public void close()\r\n    {\r\n        mDbHelper.close();\r\n    }\r\n\r\n    public List getTableData()\r\n    {\r\n        try\r\n        {\r\n            // Table 이름 -> antpool_bitcoin 불러오기\r\n            String sql =\"SELECT * FROM \" + TABLE_NAME;\r\n\r\n            // 모델 넣을 리스트 생성\r\n            List userList = new ArrayList();\r\n\r\n            // TODO : 모델 선언\r\n            User user= null;\r\n\r\n            Cursor mCur = mDb.rawQuery(sql, null);\r\n            if (mCur!=null)\r\n            {\r\n                // 칼럼의 마지막까지\r\n                while( mCur.moveToNext() ) {\r\n\r\n                    // TODO : 커스텀 모델 생성\r\n                    user = new User();\r\n\r\n                    // TODO : Record 기술\r\n                    // id, name, account, privateKey, secretKey, Comment\r\n                    user.Username(mCur.getString(0));\r\n                    user.Student_id(mCur.getString(1));\r\n                    user.ID(mCur.getString(2));\r\n                    user.Password(mCur.getString(3));\r\n                    user.Email(mCur.getString(4));\r\n                    user.is_professor(mCur.getString(5));\r\n                    user.Time(mCur.getString(6));\r\n                    user.CsCheck(mCur.getString(7));\r\n\r\n\r\n\r\n\r\n                    // 리스트에 넣기\r\n                    userList.add(user);\r\n                }\r\n\r\n            }\r\n            return userList;\r\n        }\r\n        catch (SQLException mSQLException)\r\n        {\r\n            Log.e(TAG, \"getTestData >>\"+ mSQLException.toString());\r\n            throw mSQLException;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public void getReadableDatabase()\r\n    {\r\n        try\r\n        {\r\n            // Table 이름 -> antpool_bitcoin 불러오기\r\n            String sql =\"SELECT * FROM \" + TABLE_NAME;\r\n\r\n            // 모델 넣을 리스트 생성\r\n            List userList = new ArrayList();\r\n\r\n            // TODO : 모델 선언\r\n            User user= null;\r\n\r\n            Cursor mCur = mDb.rawQuery(sql, null);\r\n            if (mCur!=null)\r\n            {\r\n                // 칼럼의 마지막까지\r\n                while( mCur.moveToNext() ) {\r\n\r\n                    // TODO : 커스텀 모델 생성\r\n                    user = new User();\r\n\r\n                    // TODO : Record 기술\r\n                    // id, name, account, privateKey, secretKey, Comment\r\n                    user.Username(mCur.getString(0));\r\n                    user.Student_id(mCur.getString(1));\r\n                    user.ID(mCur.getString(2));\r\n                    user.Password(mCur.getString(3));\r\n                    user.Email(mCur.getString(4));\r\n                    user.is_professor(mCur.getString(5));\r\n                    user.Time(mCur.getString(6));\r\n                    user.CsCheck(mCur.getString(7));\r\n\r\n\r\n\r\n\r\n                    // 리스트에 넣기\r\n                    userList.add(user);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        catch (SQLException mSQLException)\r\n        {\r\n            Log.e(TAG, \"getTestData >>\"+ mSQLException.toString());\r\n            throw mSQLException;\r\n        }\r\n    }\r\n    public boolean authenticateUser(String username, String password) {\r\n        SQLiteDatabase db = mDbHelper.getReadableDatabase();\r\n        Cursor cursor = db.query(TABLE_NAME, new String[]{\"ID\"},\r\n                \"ID = ? AND Password = ?\", new String[]{username, password},\r\n                null, null, null);\r\n\r\n        boolean authenticated = cursor.moveToFirst();\r\n        cursor.close();\r\n        db.close();\r\n\r\n        return authenticated;\r\n    }\r\n\r\n\r\npublic void setAccount(String username, String password) {\r\n    SQLiteDatabase db = mDbHelper.getReadableDatabase();\r\n        List<User> LoginUser = new ArrayList<>();\r\n        User user = null;\r\n\r\n        // SQL 쿼리 실행\r\n        String query = \"SELECT * FROM \" + TABLE_NAME +\r\n                \" WHERE ID = ? AND Password = ?\";\r\n        Cursor cursor = db.rawQuery(query, new String[]{username, password});\r\n\r\n        // 결과 처리\r\n        while (cursor.moveToNext()) {\r\n            // User 객체 생성 및 정보 저장\r\n            user = new User();\r\n            user.Username(cursor.getString(0));\r\n            user.Student_id(cursor.getInt(1));\r\n            user.ID(cursor.getString(2));\r\n            user.Password(cursor.getString(3));\r\n            user.Email(cursor.getString(4));\r\n            user.is_professor(cursor.getInt(5));\r\n            user.Time(cursor.getInt(6));\r\n            user.CsCheck(cursor.getInt(7));\r\n            LoginUser.add(user);\r\n        }\r\n\r\n    // 리소스 해제\r\n    cursor.close();\r\n    db.close();\r\n\r\n    User.userList = LoginUser;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myapplication/DataAdapter.java b/app/src/main/java/com/example/myapplication/DataAdapter.java
--- a/app/src/main/java/com/example/myapplication/DataAdapter.java	(revision 60195a677e6fbfe8a828e64772c60d4619fa2fa0)
+++ b/app/src/main/java/com/example/myapplication/DataAdapter.java	(date 1683090748005)
@@ -194,7 +194,7 @@
             // User 객체 생성 및 정보 저장
             user = new User();
             user.Username(cursor.getString(0));
-            user.Student_id(cursor.getInt(1));
+            user.Student_id(cursor.getString(1));
             user.ID(cursor.getString(2));
             user.Password(cursor.getString(3));
             user.Email(cursor.getString(4));
